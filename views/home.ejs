<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Home</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <script
      type="text/javascript"
      src="https://www.gstatic.com/charts/loader.js"
    ></script>
  </head>
  <body>
    <div style="text-align: center">
      <div style="width: fit-content; margin: 0 auto">
        <h2 style="margin: 20px">Prize Distribution</h2>
        <% let totalProbability = 0; %> <% prizes.forEach(prize => { %> <%
        totalProbability += parseFloat(prize.probability); %> <% }); %> <% let
        remainingProbability = Math.max(0, 100 - totalProbability); %> <% if
        (remainingProbability > 0) { %>
        <p
          style="background-color: #ffc0cb; padding: 10px; white-space: nowrap"
        >
          Total Probability Entered: <%= totalProbability.toFixed(2) %>% and
          Remaining Probability: <%= remainingProbability.toFixed(2) %>% out of
          100
        </p>
        <% } %>
      </div>
    </div>

    <div class="container">
      <a href="/create"><button class="btn btn-primary">Create</button></a>

      <table class="table table-hover">
        <thead>
          <tr>
            <th>Prize ID</th>
            <th>Title</th>
            <th>Probability</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <% prizes.forEach((prize) => { %>
          <tr>
            <td><%- prize.prize_id %></td>
            <td><%- prize.title %></td>
            <td><%- prize.probability %></td>
            <td>
              <a class="btn btn-primary" href="/edit/<%- prize.prize_id %>"
                >Edit</a
              >
              <a class="btn btn-danger" href="/delete/<%- prize._id %>"
                >Delete</a
              >
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>

      <div class="card" style="width: 20rem">
        <div class="card-body">
          <h5
            class="card-title bg-info"
            style="text-align: center; padding: 10px"
          >
            Simulate
          </h5>
          <label for="numPrizes" class="form-label">Number of Prizes</label>
          <input
            type="number"
            class="form-control"
            name="numPrizes"
            id="numPrizes"
            min="1"
            required
          /><br />
          <div class="fluid field">
            <button onclick="simulate()" class="btn btn-primary">
              Simulate
            </button>
            <button onclick="reset()" class="btn btn-warning">Reset</button>
          </div>
        </div>
      </div>

      <div style="display: flex; justify-content: center">
        <div style="display: flex">
          <div id="oldChart" style="width: 550px; height: 550px"></div>
          <div id="probabilityChart" style="width: 550px; height: 550px"></div>
        </div>
      </div>

      <div id="rewardTable"></div>
    </div>

    <script>
    
    var prizeTitles = [
        <% prizes.forEach((prize) => { %>
            '<%= prize.title %>',
        <% }) %>
    ];

    var randomizedProbabilities;

    function simulate() {
    var numPrizes = document.getElementById('numPrizes').value;

    // Original probabilities for the first chart
    var oldData = {
        <% prizes.forEach((prize, index) => { %>
            "<%= prize.title %>": <%= prize.probability %>,
        <% }) %>
    };

    // Randomize probabilities for both the second chart and the reward table
    randomizedProbabilities = randomizeProbabilities(Object.values(oldData), numPrizes, prizeTitles);

    // Load Google Charts library
    google.charts.load('current', {packages: ['corechart'], 'callback': drawCharts});

    // Define the drawCharts function
    function drawCharts() {
        // Draw the first chart
        var oldDataArray = [['Title', 'Probability']];
        Object.entries(oldData).forEach(([key, value]) => {
            oldDataArray.push([key, parseFloat(value)]);
        });
        var oldDataGoogle = google.visualization.arrayToDataTable(oldDataArray);
        var options1 = {
            title: 'Probability Distribution (Original)',
            is3D: true,
        };
        var chart1 = new google.visualization.PieChart(document.getElementById('oldChart'));
        chart1.draw(oldDataGoogle, options1);

        // Draw the second chart with randomized data
        var randomizedDataArray = [['Title', 'Probability']];
        Object.entries(randomizedProbabilities.randomizedData).forEach(([key, value]) => {
            randomizedDataArray.push([key, parseFloat(value)]);
        });
        var randomizedDataGoogle = google.visualization.arrayToDataTable(randomizedDataArray);
        var options2 = {
            title: 'Randomized Probability Distribution',
            is3D: true,
        };
        var chart2 = new google.visualization.PieChart(document.getElementById('probabilityChart'));
        chart2.draw(randomizedDataGoogle, options2);
    }

    // Display reward table with the same randomized data
    displayRewardTable(randomizedProbabilities.randomizedData, randomizedProbabilities.rewardValues);
  }


    function randomizeProbabilities(probabilities, numPrizes, prizeTitles) {
        const randomizedData = {};
        const rewardValues = {};
        probabilities.forEach((probability, index) => {
            const randomValue = parseFloat(probability) + (Math.random() * 0.4 - 0.2);
            randomizedData[prizeTitles[index]] = randomValue.toFixed(2);
            rewardValues[prizeTitles[index]] = Math.round((randomValue * numPrizes) / 100);
        });
        return { randomizedData, rewardValues };
    }

    function displayRewardTable(randomizedData, rewardValues) {
        var table = document.createElement('table');
        table.classList.add('table');

        var thead = document.createElement('thead');
        var tr = document.createElement('tr');
        var th1 = document.createElement('th');
        var th2 = document.createElement('th');
        var th3 = document.createElement('th');
        th1.textContent = 'Title';
        th2.textContent = 'Probability';
        th3.textContent = 'Reward';
        tr.appendChild(th1);
        tr.appendChild(th2);
        tr.appendChild(th3);
        thead.appendChild(tr);
        table.appendChild(thead);

        var tbody = document.createElement('tbody');
        Object.keys(randomizedData).forEach(function(key) {
            var tr = document.createElement('tr');
            var td1 = document.createElement('td');
            var td2 = document.createElement('td');
            var td3 = document.createElement('td');
            td1.textContent = key;
            td2.textContent = randomizedData[key] + '%'; // Append '%' sign to the probability
            td3.textContent = rewardValues[key];
            tr.appendChild(td1);
            tr.appendChild(td2);
            tr.appendChild(td3);
            tbody.appendChild(tr);
        });
        table.appendChild(tbody);

        var rewardTable = document.getElementById('rewardTable');
        rewardTable.innerHTML = '';
        rewardTable.appendChild(table);
    }

    function reset() {
        location.reload(); // Reload the page to reset it
    };
    </script>
  </body>
</html>
